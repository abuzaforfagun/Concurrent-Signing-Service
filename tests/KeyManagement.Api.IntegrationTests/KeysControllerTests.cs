using System;
using System.Net;
using System.Threading.Tasks;
using ConcurrentSigning.Cryptography;
using KeyManagement.Api.Config;
using KeyManagement.Api.IntegrationTests.Infrastructure;
using KeyManagement.Api.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using Xunit;

namespace KeyManagement.Api.IntegrationTests
{
    public class KeysControllerTests : IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly WebApplicationFactory<Program> _factory;

        public KeysControllerTests(WebApplicationFactory<Program> factory)
        {
            _factory = factory.WithWebHostBuilder(b =>
            {
                var config = new ConfigurationBuilder()
                    .AddJsonFile("appsettings.json")
                    .Build();

                b.ConfigureAppConfiguration((host, config) =>
                {
                    config.AddJsonFile("appsettings.json");
                });

                b.ConfigureServices(services =>
                {
                    services.Configure<DatabaseOptions>(config.GetSection("Database"));
                });
                
            });

            _factory.CreateClient();
        }

        [Fact]
        public async Task Pop_Should_ReturnCorrectKey()
        {
            await DbHelper.CleanUpDatabaseAsync();

            await DbHelper.AddNewKeyAsync(
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPjI1MkphU0ZXbUJxLzF1cXFONHRnRm9qMFZNS0gxaHVxOVpEcXhJdWsxNWFmUWplVjJBL1B4aFhpZU5KNkNiMmt0VTZkQU5Xd1BJT1pPaml2OEMxb2V3PT08L1A+PFE+dzFUZVlseGdTazh2WEd2UlhNWm52cFhHUXdienJ0QmFoTTBPTmtndmUxbmFZYlFCVnlyQzJoUXQ3RkVMWFBHa3MzeTYzcDBMVVdoa0N0Vk5FTktpbXc9PTwvUT48RFA+dXVtdm83eHVHUExiUjYxZHhmeG5nWVo2ZlJFN3p5eXBLbXQyaEdWZG5PZGpFRmFDdit0bEtQQkRXaFc1TEVVdHcrbnVrbUZNcDVSUmUwMzMzL0NsdFE9PTwvRFA+PERRPkszU1NGT2ZnTkNmeHJXbi9KZGl0OCtSMk95c3N3MU52RCtSZXFRemVJMThXQ201MWJlTUJmbXJHM0xBYkN3NW5TZGNSNjd5Y2Evd0JaYmVXY1l1cXlRPT08L0RRPjxJbnZlcnNlUT5kYlJaRWVsSGVzcllEOTM4SEJTZXJWWnE4bG93aTBoTlkvb2t3eG1rR1VoZnBNYm1EQnJYYlIwV3BERU51bW1rQUJQVjJkLzFoOFBYd3BYNE1PbUp1Zz09PC9JbnZlcnNlUT48RD5EY29JellueDdnT05HL0VxekF2TjBpTDlLcnZPc25NaVdnNlZmTjdZZnVQZHZhWkN3MDRJcGpPU3RvczhkMTJvMFBpOHJ5L3VPVWh3ZVpXa2hzK3pMWis5L0dCYnl6dU5nMUxKTWg3RDZDR016bXVpNHVRQVdIdWgwT1g1YjJiOURXOXZHb3V2RXJjNkJqV2tEVk5rb3BOTmJXbGs4OU15bmtGUGI5Y1hGNlU9PC9EPjwvUlNBS2V5VmFsdWU+",
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+");

            var result = await _factory.Server.CreateRequest("v1/keys").PostAsync();
            
            var json = await result.Content.ReadAsStringAsync();

            var payload = JsonConvert.DeserializeObject<GetKeyOutput>(json);

            Assert.True(result.IsSuccessStatusCode);
            Assert.NotNull(payload);
            var decryptedPrivateKey = SymmetricEncryption.Decrypt(payload.PrivateKey, TestStaticSettings.PrivateKey);
            Assert.Equal("PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPjI1MkphU0ZXbUJxLzF1cXFONHRnRm9qMFZNS0gxaHVxOVpEcXhJdWsxNWFmUWplVjJBL1B4aFhpZU5KNkNiMmt0VTZkQU5Xd1BJT1pPaml2OEMxb2V3PT08L1A+PFE+dzFUZVlseGdTazh2WEd2UlhNWm52cFhHUXdienJ0QmFoTTBPTmtndmUxbmFZYlFCVnlyQzJoUXQ3RkVMWFBHa3MzeTYzcDBMVVdoa0N0Vk5FTktpbXc9PTwvUT48RFA+dXVtdm83eHVHUExiUjYxZHhmeG5nWVo2ZlJFN3p5eXBLbXQyaEdWZG5PZGpFRmFDdit0bEtQQkRXaFc1TEVVdHcrbnVrbUZNcDVSUmUwMzMzL0NsdFE9PTwvRFA+PERRPkszU1NGT2ZnTkNmeHJXbi9KZGl0OCtSMk95c3N3MU52RCtSZXFRemVJMThXQ201MWJlTUJmbXJHM0xBYkN3NW5TZGNSNjd5Y2Evd0JaYmVXY1l1cXlRPT08L0RRPjxJbnZlcnNlUT5kYlJaRWVsSGVzcllEOTM4SEJTZXJWWnE4bG93aTBoTlkvb2t3eG1rR1VoZnBNYm1EQnJYYlIwV3BERU51bW1rQUJQVjJkLzFoOFBYd3BYNE1PbUp1Zz09PC9JbnZlcnNlUT48RD5EY29JellueDdnT05HL0VxekF2TjBpTDlLcnZPc25NaVdnNlZmTjdZZnVQZHZhWkN3MDRJcGpPU3RvczhkMTJvMFBpOHJ5L3VPVWh3ZVpXa2hzK3pMWis5L0dCYnl6dU5nMUxKTWg3RDZDR016bXVpNHVRQVdIdWgwT1g1YjJiOURXOXZHb3V2RXJjNkJqV2tEVk5rb3BOTmJXbGs4OU15bmtGUGI5Y1hGNlU9PC9EPjwvUlNBS2V5VmFsdWU+",
                decryptedPrivateKey);
        }

        [Fact]
        public async Task Pop_Should_LockTheKey()
        {
            await DbHelper.CleanUpDatabaseAsync();

            await DbHelper.AddNewKeyAsync(
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPjI1MkphU0ZXbUJxLzF1cXFONHRnRm9qMFZNS0gxaHVxOVpEcXhJdWsxNWFmUWplVjJBL1B4aFhpZU5KNkNiMmt0VTZkQU5Xd1BJT1pPaml2OEMxb2V3PT08L1A+PFE+dzFUZVlseGdTazh2WEd2UlhNWm52cFhHUXdienJ0QmFoTTBPTmtndmUxbmFZYlFCVnlyQzJoUXQ3RkVMWFBHa3MzeTYzcDBMVVdoa0N0Vk5FTktpbXc9PTwvUT48RFA+dXVtdm83eHVHUExiUjYxZHhmeG5nWVo2ZlJFN3p5eXBLbXQyaEdWZG5PZGpFRmFDdit0bEtQQkRXaFc1TEVVdHcrbnVrbUZNcDVSUmUwMzMzL0NsdFE9PTwvRFA+PERRPkszU1NGT2ZnTkNmeHJXbi9KZGl0OCtSMk95c3N3MU52RCtSZXFRemVJMThXQ201MWJlTUJmbXJHM0xBYkN3NW5TZGNSNjd5Y2Evd0JaYmVXY1l1cXlRPT08L0RRPjxJbnZlcnNlUT5kYlJaRWVsSGVzcllEOTM4SEJTZXJWWnE4bG93aTBoTlkvb2t3eG1rR1VoZnBNYm1EQnJYYlIwV3BERU51bW1rQUJQVjJkLzFoOFBYd3BYNE1PbUp1Zz09PC9JbnZlcnNlUT48RD5EY29JellueDdnT05HL0VxekF2TjBpTDlLcnZPc25NaVdnNlZmTjdZZnVQZHZhWkN3MDRJcGpPU3RvczhkMTJvMFBpOHJ5L3VPVWh3ZVpXa2hzK3pMWis5L0dCYnl6dU5nMUxKTWg3RDZDR016bXVpNHVRQVdIdWgwT1g1YjJiOURXOXZHb3V2RXJjNkJqV2tEVk5rb3BOTmJXbGs4OU15bmtGUGI5Y1hGNlU9PC9EPjwvUlNBS2V5VmFsdWU+",
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+");

            var result = await _factory.Server.CreateRequest("v1/keys").PostAsync();

            var json = await result.Content.ReadAsStringAsync();

            var payload = JsonConvert.DeserializeObject<GetKeyOutput>(json);

            var isKeyLocked = await DbHelper.GetKeyIsLockedStatusAsync(payload.Id);
            Assert.True(isKeyLocked);
        }

        [Fact]
        public async Task Pop_Should_GetLeastUsedKey()
        {
            await DbHelper.CleanUpDatabaseAsync();

            await DbHelper.AddNewKeyAsync(
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPjI1MkphU0ZXbUJxLzF1cXFONHRnRm9qMFZNS0gxaHVxOVpEcXhJdWsxNWFmUWplVjJBL1B4aFhpZU5KNkNiMmt0VTZkQU5Xd1BJT1pPaml2OEMxb2V3PT08L1A+PFE+dzFUZVlseGdTazh2WEd2UlhNWm52cFhHUXdienJ0QmFoTTBPTmtndmUxbmFZYlFCVnlyQzJoUXQ3RkVMWFBHa3MzeTYzcDBMVVdoa0N0Vk5FTktpbXc9PTwvUT48RFA+dXVtdm83eHVHUExiUjYxZHhmeG5nWVo2ZlJFN3p5eXBLbXQyaEdWZG5PZGpFRmFDdit0bEtQQkRXaFc1TEVVdHcrbnVrbUZNcDVSUmUwMzMzL0NsdFE9PTwvRFA+PERRPkszU1NGT2ZnTkNmeHJXbi9KZGl0OCtSMk95c3N3MU52RCtSZXFRemVJMThXQ201MWJlTUJmbXJHM0xBYkN3NW5TZGNSNjd5Y2Evd0JaYmVXY1l1cXlRPT08L0RRPjxJbnZlcnNlUT5kYlJaRWVsSGVzcllEOTM4SEJTZXJWWnE4bG93aTBoTlkvb2t3eG1rR1VoZnBNYm1EQnJYYlIwV3BERU51bW1rQUJQVjJkLzFoOFBYd3BYNE1PbUp1Zz09PC9JbnZlcnNlUT48RD5EY29JellueDdnT05HL0VxekF2TjBpTDlLcnZPc25NaVdnNlZmTjdZZnVQZHZhWkN3MDRJcGpPU3RvczhkMTJvMFBpOHJ5L3VPVWh3ZVpXa2hzK3pMWis5L0dCYnl6dU5nMUxKTWg3RDZDR016bXVpNHVRQVdIdWgwT1g1YjJiOURXOXZHb3V2RXJjNkJqV2tEVk5rb3BOTmJXbGs4OU15bmtGUGI5Y1hGNlU9PC9EPjwvUlNBS2V5VmFsdWU+",
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+",
                DateTimeOffset.UtcNow);

            await DbHelper.AddNewKeyAsync(
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnl0NWVHL3MrM3JQVUJXY05BcEhldUZCaS92ZTdxUit6QythVnBQekVNeGhUemYvS05NejljS1JLTW9BdGJVNHVaNDJrMDY2UG1wV1BxQVZvYllUVTRYWUV3YTdCcWNnMUcxM3Vocy9YSG1WVmppcXRDUzI0L2xTS2IwdlNMeDhZQ01XbWt2Z01KMGVJZmVnQ2FVMlhZMm1QbnU4WnhTYWZXK3U4enJNZERvMD08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPnpuUW1jd0t5b3hBcFJLK3dXcC93VmJJYUpWR1lBQUpheTlscWxzU0gwSDhrdHFzZnNaOE9DUk96QTVuUzQ3VWVjdjZmL1U0SFYxTnBHTk1XY0dNeTd3PT08L1A+PFE+KzQzMkQyakgrL1ZZTnFybGdPUEJ2OVlrUmJlSW1CbGJoN0xqL1ZveTZuVXJLM0pINzlER2JydmxqYWNXWkJ4NW9yWlI3bno5eHh4Tlcvc2YzTnptUXc9PTwvUT48RFA+TkJOaU8zSjd3dHZwdlBTZ0JFd0JvR3diWWp4eG5kYjZOaDh5WHJOV0dzWm5hVmhDMTFmcWYybWpwdzNlL3ljSmRqSTZBdmZ5ckJsVEVqcjBsd2ErcXc9PTwvRFA+PERRPkc5YnhOWEZlT0pkRmhQOVMyUG5iMW5SSG5XT2JmV0hKREhLUzR0WVpybkw3TFJxL3RWM0FxRDZwUUEwTzRGTjZiclNJeXNFUWdQbXo0Z3NmMHB5cjZ3PT08L0RRPjxJbnZlcnNlUT50ek9xUFV0cmpqOUpxVTVBaGJUS2V6NEFkczFrSU5lSmlCUDNiU2l1cS9VTUFCMFVXbkt4eUc4NHhzTDFBd0R6dTM5c0J2dEFHSHgyd1N0Y09Td0FCZz09PC9JbnZlcnNlUT48RD5aMGwyRXJzRmxHOXNXRi9TUU9leHhKZXcvMjEwRHpTRGZXQ2wrZjF6aXl3c3B1by9za2hZRlB5Z2hqdTZaVGR6NnVjejcwNmw4S2VMSDVtNVJHRm4zSVdBUjBaZWp0NWlUUEFPTUpURTBKV0V5OENmbkRCb2hwdHl4NGVnQjNkZ3RLYXNWUE5nM2N6Q3I0bFBOWFk2OFQyOVRXOHNyaHE4MzNyQkdiaHJHa1U9PC9EPjwvUlNBS2V5VmFsdWU+",
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnl0NWVHL3MrM3JQVUJXY05BcEhldUZCaS92ZTdxUit6QythVnBQekVNeGhUemYvS05NejljS1JLTW9BdGJVNHVaNDJrMDY2UG1wV1BxQVZvYllUVTRYWUV3YTdCcWNnMUcxM3Vocy9YSG1WVmppcXRDUzI0L2xTS2IwdlNMeDhZQ01XbWt2Z01KMGVJZmVnQ2FVMlhZMm1QbnU4WnhTYWZXK3U4enJNZERvMD08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+",
                DateTimeOffset.UtcNow.AddHours(-1));


            var result = await _factory.Server.CreateRequest("v1/keys").PostAsync();

            var json = await result.Content.ReadAsStringAsync();

            var payload = JsonConvert.DeserializeObject<GetKeyOutput>(json);
            
            Assert.True(result.IsSuccessStatusCode);
            Assert.NotNull(payload);
            var decryptedPrivateKey = SymmetricEncryption.Decrypt(payload.PrivateKey, TestStaticSettings.PrivateKey);
            Assert.Equal("PFJTQUtleVZhbHVlPjxNb2R1bHVzPnl0NWVHL3MrM3JQVUJXY05BcEhldUZCaS92ZTdxUit6QythVnBQekVNeGhUemYvS05NejljS1JLTW9BdGJVNHVaNDJrMDY2UG1wV1BxQVZvYllUVTRYWUV3YTdCcWNnMUcxM3Vocy9YSG1WVmppcXRDUzI0L2xTS2IwdlNMeDhZQ01XbWt2Z01KMGVJZmVnQ2FVMlhZMm1QbnU4WnhTYWZXK3U4enJNZERvMD08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPnpuUW1jd0t5b3hBcFJLK3dXcC93VmJJYUpWR1lBQUpheTlscWxzU0gwSDhrdHFzZnNaOE9DUk96QTVuUzQ3VWVjdjZmL1U0SFYxTnBHTk1XY0dNeTd3PT08L1A+PFE+KzQzMkQyakgrL1ZZTnFybGdPUEJ2OVlrUmJlSW1CbGJoN0xqL1ZveTZuVXJLM0pINzlER2JydmxqYWNXWkJ4NW9yWlI3bno5eHh4Tlcvc2YzTnptUXc9PTwvUT48RFA+TkJOaU8zSjd3dHZwdlBTZ0JFd0JvR3diWWp4eG5kYjZOaDh5WHJOV0dzWm5hVmhDMTFmcWYybWpwdzNlL3ljSmRqSTZBdmZ5ckJsVEVqcjBsd2ErcXc9PTwvRFA+PERRPkc5YnhOWEZlT0pkRmhQOVMyUG5iMW5SSG5XT2JmV0hKREhLUzR0WVpybkw3TFJxL3RWM0FxRDZwUUEwTzRGTjZiclNJeXNFUWdQbXo0Z3NmMHB5cjZ3PT08L0RRPjxJbnZlcnNlUT50ek9xUFV0cmpqOUpxVTVBaGJUS2V6NEFkczFrSU5lSmlCUDNiU2l1cS9VTUFCMFVXbkt4eUc4NHhzTDFBd0R6dTM5c0J2dEFHSHgyd1N0Y09Td0FCZz09PC9JbnZlcnNlUT48RD5aMGwyRXJzRmxHOXNXRi9TUU9leHhKZXcvMjEwRHpTRGZXQ2wrZjF6aXl3c3B1by9za2hZRlB5Z2hqdTZaVGR6NnVjejcwNmw4S2VMSDVtNVJHRm4zSVdBUjBaZWp0NWlUUEFPTUpURTBKV0V5OENmbkRCb2hwdHl4NGVnQjNkZ3RLYXNWUE5nM2N6Q3I0bFBOWFk2OFQyOVRXOHNyaHE4MzNyQkdiaHJHa1U9PC9EPjwvUlNBS2V5VmFsdWU+",
                decryptedPrivateKey);
        }

        [Fact]
        public async Task Pop_ShouldReturn_NotFound_When_AllKeysAreLocked()
        {
            await DbHelper.CleanUpDatabaseAsync();

            await DbHelper.AddNewKeyAsync(
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPjI1MkphU0ZXbUJxLzF1cXFONHRnRm9qMFZNS0gxaHVxOVpEcXhJdWsxNWFmUWplVjJBL1B4aFhpZU5KNkNiMmt0VTZkQU5Xd1BJT1pPaml2OEMxb2V3PT08L1A+PFE+dzFUZVlseGdTazh2WEd2UlhNWm52cFhHUXdienJ0QmFoTTBPTmtndmUxbmFZYlFCVnlyQzJoUXQ3RkVMWFBHa3MzeTYzcDBMVVdoa0N0Vk5FTktpbXc9PTwvUT48RFA+dXVtdm83eHVHUExiUjYxZHhmeG5nWVo2ZlJFN3p5eXBLbXQyaEdWZG5PZGpFRmFDdit0bEtQQkRXaFc1TEVVdHcrbnVrbUZNcDVSUmUwMzMzL0NsdFE9PTwvRFA+PERRPkszU1NGT2ZnTkNmeHJXbi9KZGl0OCtSMk95c3N3MU52RCtSZXFRemVJMThXQ201MWJlTUJmbXJHM0xBYkN3NW5TZGNSNjd5Y2Evd0JaYmVXY1l1cXlRPT08L0RRPjxJbnZlcnNlUT5kYlJaRWVsSGVzcllEOTM4SEJTZXJWWnE4bG93aTBoTlkvb2t3eG1rR1VoZnBNYm1EQnJYYlIwV3BERU51bW1rQUJQVjJkLzFoOFBYd3BYNE1PbUp1Zz09PC9JbnZlcnNlUT48RD5EY29JellueDdnT05HL0VxekF2TjBpTDlLcnZPc25NaVdnNlZmTjdZZnVQZHZhWkN3MDRJcGpPU3RvczhkMTJvMFBpOHJ5L3VPVWh3ZVpXa2hzK3pMWis5L0dCYnl6dU5nMUxKTWg3RDZDR016bXVpNHVRQVdIdWgwT1g1YjJiOURXOXZHb3V2RXJjNkJqV2tEVk5rb3BOTmJXbGs4OU15bmtGUGI5Y1hGNlU9PC9EPjwvUlNBS2V5VmFsdWU+",
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnA1SE9JeW1hNDZMclU3TnJreUtBN0Q1dm9qOWtPQm1yMkwxNWNuYWthM3lpeTZSUFFLU2V2MDkxZmI0cE8wdHYwYjU1L2RoNlZtekpqZVBuVm5PaVJVS21GTDJYTzdnUE55RlRBMWEwdjVnMjQ2Q0pMK1ZYdERYSjVRaHJYajNLTUJZbitGZmtQdWVYdk8zRVMvd2RkZTZvSjdzYXNDdEJROXBJU1l5Q0dIaz08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+",
                DateTimeOffset.UtcNow,
                true);

            await DbHelper.AddNewKeyAsync(
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnl0NWVHL3MrM3JQVUJXY05BcEhldUZCaS92ZTdxUit6QythVnBQekVNeGhUemYvS05NejljS1JLTW9BdGJVNHVaNDJrMDY2UG1wV1BxQVZvYllUVTRYWUV3YTdCcWNnMUcxM3Vocy9YSG1WVmppcXRDUzI0L2xTS2IwdlNMeDhZQ01XbWt2Z01KMGVJZmVnQ2FVMlhZMm1QbnU4WnhTYWZXK3U4enJNZERvMD08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPnpuUW1jd0t5b3hBcFJLK3dXcC93VmJJYUpWR1lBQUpheTlscWxzU0gwSDhrdHFzZnNaOE9DUk96QTVuUzQ3VWVjdjZmL1U0SFYxTnBHTk1XY0dNeTd3PT08L1A+PFE+KzQzMkQyakgrL1ZZTnFybGdPUEJ2OVlrUmJlSW1CbGJoN0xqL1ZveTZuVXJLM0pINzlER2JydmxqYWNXWkJ4NW9yWlI3bno5eHh4Tlcvc2YzTnptUXc9PTwvUT48RFA+TkJOaU8zSjd3dHZwdlBTZ0JFd0JvR3diWWp4eG5kYjZOaDh5WHJOV0dzWm5hVmhDMTFmcWYybWpwdzNlL3ljSmRqSTZBdmZ5ckJsVEVqcjBsd2ErcXc9PTwvRFA+PERRPkc5YnhOWEZlT0pkRmhQOVMyUG5iMW5SSG5XT2JmV0hKREhLUzR0WVpybkw3TFJxL3RWM0FxRDZwUUEwTzRGTjZiclNJeXNFUWdQbXo0Z3NmMHB5cjZ3PT08L0RRPjxJbnZlcnNlUT50ek9xUFV0cmpqOUpxVTVBaGJUS2V6NEFkczFrSU5lSmlCUDNiU2l1cS9VTUFCMFVXbkt4eUc4NHhzTDFBd0R6dTM5c0J2dEFHSHgyd1N0Y09Td0FCZz09PC9JbnZlcnNlUT48RD5aMGwyRXJzRmxHOXNXRi9TUU9leHhKZXcvMjEwRHpTRGZXQ2wrZjF6aXl3c3B1by9za2hZRlB5Z2hqdTZaVGR6NnVjejcwNmw4S2VMSDVtNVJHRm4zSVdBUjBaZWp0NWlUUEFPTUpURTBKV0V5OENmbkRCb2hwdHl4NGVnQjNkZ3RLYXNWUE5nM2N6Q3I0bFBOWFk2OFQyOVRXOHNyaHE4MzNyQkdiaHJHa1U9PC9EPjwvUlNBS2V5VmFsdWU+",
                "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnl0NWVHL3MrM3JQVUJXY05BcEhldUZCaS92ZTdxUit6QythVnBQekVNeGhUemYvS05NejljS1JLTW9BdGJVNHVaNDJrMDY2UG1wV1BxQVZvYllUVTRYWUV3YTdCcWNnMUcxM3Vocy9YSG1WVmppcXRDUzI0L2xTS2IwdlNMeDhZQ01XbWt2Z01KMGVJZmVnQ2FVMlhZMm1QbnU4WnhTYWZXK3U4enJNZERvMD08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+",
                DateTimeOffset.UtcNow.AddHours(-1),
                true);


            var result = await _factory.Server.CreateRequest("v1/keys").PostAsync();
            
            Assert.Equal(HttpStatusCode.NotFound, result.StatusCode);
        }
    }
}